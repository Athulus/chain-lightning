# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: blog

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  environment:
      ENTRY_TABLE: ${self:custom.entryTable}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem 
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:custom.entryTable}

custom:
  entryTable: ${self:service}-${self:provider.stage}-entryTable

functions:
  get_entries:
    handler: blog.get_entries
    events:
      - http:
          path: blog/entries
          method: get

  get_entry:
    handler: blog.get_entry
    events:
      - http:
          path: blog/entries/{id}
          method: get
        

  create_entry:
    handler: blog.create_entry
    events:
      - http:
          path: blog/entries
          method: post
  
  update_entry:
    handler: blog.update_entry
    events:
      - http:
          path: blog/entries/{id}
          method: put
  
  delete_entry:
    handler: blog.delete_entry
    events:
      - http:
          path: blog/entries/{id}
          method: delete

  
resources:
  Resources:
    entryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.entryTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N

        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
